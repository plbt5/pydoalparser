[1]		Corr	"Correspondence"	::== E EER E | i ICR C | C CIR i
[2]		E	 	"Entity Expression"	::== C | R | P | A | i
[3]		C		"Class Expression"	::== clss | C u C | C n C | ~C | exst(K)
[4]		R		"Object property"	::== reln | R u R | R n R | ~R | dom(C) | rng(C) | inv(R) | sym(R) | trans(R) | refl(R)
[5]		P		"Datatype property"	::== prop | P u P | P n P | ~P | dom(C) | rng(C)
[6]		A		"Attribute"			::== A eq (R n dom(C)) | A eq (P n dom(C))
[7]		Q		"Path"				::== Q' | p | Q'.p
[8]		Q'							::== 0	| r | Q'.r
[9]		V		"Values"			::== v | i | Q | transf(V*)
[10]	K		"Constraints"		::== Q cp V 			(i.e., value restriction)
											| Q cp d 		(i.e., type restriction)
											| |Q| cp m		(i.e., multiplicity restriction)

[20]	EER		::== equiv | subsump (i.e., superset) | subsdBy (i.e., subset)
[21]	ICR		::== member (i.e., written as epsilon)
[22]	CIR		::== contns (i.e., written as mirrored epsilon)

##### TERMINALS #####
i		= name of individual
clss	= name of ontological class
reln	= name of ontological relation
prop	= name of ontological property
d		= data type
v		= value
0		= empty set, None
r		= path-relation
p		= path-property

###### Operators
u 		= union operator (boolean OR)
n 		= intersection operator (boolean AND)
~ 		= not operator (boolean NOT)
exst	= existence of constraints
dom		= domain of Class
rng		= range of Class
inv		= converse of Relation
sym		= symmetric closure of Relation
trans	= transitive closure of Relation
refl	= reflective closure of Relation
equiv	= equivalence of Classes
subsump	= subsumption of Class (i.e., specialisation)
subsdBy	= subsumed by Class (i.e., generalisation)
member	= membership of Class
contns	= Class contians individual
transf	= data transformation. This is not a terminal yet: terminals are the datatypes constraints from XQuery (i.e., numeric, 
			string, collections, and uri) and their comparators (App.B, ref[1])

###### Notes
R = Relation (OWL Object property), i.e., Relations associate two Classes
P = Property (OWL Datatype property), i.e., the range of a Property is a DataType
K = Constraints, resulting in unnamed Classes

[1]	Euzenat J., Scharffe F., D2.2.10: Expressive alignment language and implementation, Knowledge Web project (EU-IST-2004-507482), August 31, 2007
